import numpy as np
from scipy.optimize import minimize

#d)
def gresu(x):
    if x[0] >= 2.628 and x[0] <= 2.92 and x[1] >= 2.628 and x[1] <= 2.92 and x[2] >= 2.628 and x[2] <= 2.92:
        return 0
    else:
        return 1

def gresr(x):
    if x[0] >= 16 and x[0] <= 20 and x[1] >= 16 and x[1] <= 20 and x[2] >= 16 and x[2] <= 20:
        return 0
    else:
        return 1


def f(x):
    mu = 10**19
    u_i = [x[0], x[2], x[4]]
    r_i = [x[1], x[3], x[5]]
    
    if gresu(u_i) == 1:
        return ((x[0]-2.628)/0.146)*100000 + ((20-x[1])/2)*100000 + ((x[2]-2.628)/0.146)*100000 + ((20-x[3])/2)*100000 + ((x[4]-2.628)/0.146)*100000 + ((20-x[5])/2)*100000 + mu*max(0,((1/(x[0]-2.628))*(1/(20-x[1]))*(1/(x[2]-2.628))*(1/(20-x[3]))*(1/(x[4]-2.628))*(1/(20-x[5])))-2.3)**2 + mu
    elif gresr(r_i) == 1:
        return ((x[0]-2.628)/0.146)*100000 + ((20-x[1])/2)*100000 + ((x[2]-2.628)/0.146)*100000 + ((20-x[3])/2)*100000 + ((x[4]-2.628)/0.146)*100000 + ((20-x[5])/2)*100000 + mu*max(0,((1/(x[0]-2.628))*(1/(20-x[1]))*(1/(x[2]-2.628))*(1/(20-x[3]))*(1/(x[4]-2.628))*(1/(20-x[5])))-2.3)**2 + mu
    else:
        return ((x[0]-2.628)/0.146)*100000 + ((20-x[1])/2)*100000 + ((x[2]-2.628)/0.146)*100000 + ((20-x[3])/2)*100000 + ((x[4]-2.628)/0.146)*100000 + ((20-x[5])/2)*100000 + mu*max(0,((1/(x[0]-2.628))*(1/(20-x[1]))*(1/(x[2]-2.628))*(1/(20-x[3]))*(1/(x[4]-2.628))*(1/(20-x[5])))-2.3)**2  

x0 = np.array([2.7,17,2.7,17,2.7,17])
sol = minimize(f,x0, method="Nelder-Mead")
print(sol.x)
